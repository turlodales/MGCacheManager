//
//  MGCacheManager.h
//  MGCacheManager
//
//  Created by Mortgy on 20/05/15.
//  Copyright (c) 2015 mortgy. All rights reserved.
//

#import <Foundation/Foundation.h>

#define MGCACHE_LONG_DURATION @(259200) //6 months
#define MGCACHE_MEDIUM_DURATION @(43200) //1 month
#define MGCACHE_SHORT_DURATION @(10080) //1 week
#define MGCACHE_DAILY_DURATION @(1440) //1 day
#define MGCACHE_HOURLY_DURATION @(60) //1 hour


@interface MGCacheManager : NSObject

/**
 async save the objects you'd like to cache
 
 @param response could be any data or any class the conforms to  NSEncoder
 @param key generatd through buildKey:
 @param cachePeriod if defined, cahce will expire everytime the date matches, if not, it will be permenant cache
 */
+ (void)asyncSaveAndReturnKeyResponse:(id)response
								  key:(NSString *)key
                        directoryName:(NSString *)directoryName
						  cachePeriod:(NSNumber *)cachePeriod;


/**
 save the objects you'd like to cache

 @param response could be any data applys to NSEncoder
 @param key generatd through buildKey:
 @param cachePeriod if defined, cahce will expire everytime the date matches, if not, it will be permenant cache
 @return saved object
 */
+ (id)saveAndReturnKeyResponse:(id)response
						   key:(NSString *)key
                 directoryName:(NSString *)directoryName
				   cachePeriod:(NSNumber *)cachePeriod;


/**
 load cached data from disk

 @param fileNameKey key generated by buildKey:
 @return cached data
 */
+ (id)loadDataFromCacheFileNameKey:(NSString *)fileNameKey
                 fromDirectoryName:(NSString *)directoryName;


/**
list cached data from disk in folder

@param folderName user defined folder name:
@return list of names of cached files in folder
*/
+ (NSArray *)filesInFolderName:(NSString *)folderName;

/**
 check if a cached file is existing for the given key

 @param fileNameKey cache file key , could be regenerated through buildKey:
 @return True / False
 */
+ (BOOL)validateCachedFileExistanceForKey:(NSString *)fileNameKey;

/**
 delete all caches before a specific date ( could be triggered through an API flag or a notification
 to purge all caches on device
 */
+ (void)deleteAllCachesBeforeDate:(NSNumber *)unixDate;

/**
 delete cache for key
 @key file name key
 */
//+ (void)deleteCachedFileForKey:(NSString *)key;
+ (void)deleteCachedFileForFileNameKey:(NSString *)fileNameKey fromDirectoryName:(NSString *)directoryName;

/**
 manually clean up only expired caches, it's done automatically in case if the same requested file
 is requested again and it's expiry already passed
 */
+ (void)cleanExpiredCaches;


/**
 build key based on parameters which you are requesting, so even if same endpoint is requested,
 parameters will decide which cahce file to cache

 @param params endpoint request parameters / could be set as a custom parameters
 @return key / used as a cache filename
 */
+ (NSString *)buildKey:(NSDictionary *)params;


@end
